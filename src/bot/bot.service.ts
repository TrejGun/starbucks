import { Inject, Injectable, Logger, LoggerService } from "@nestjs/common";
import { Context } from "telegraf";
import { ConfigService } from "@nestjs/config";

import { TonService } from "../ton/ton.service";

enum PaymentStatus {
  IDLE = "IDLE",
  WAITING = "WAITING",
  COMPLETED = "COMPLETED",
}

interface ISessionData {
  paymentStatus: PaymentStatus;
  lastPaymentId?: string;
  starsAmount?: number;
  usdtAmount?: number;
}

@Injectable()
export class BotService {
  private readonly conversionRate: number;
  private readonly minAmount: number;
  private readonly paymentsToken: string;

  constructor(
    @Inject(Logger)
    private readonly loggerService: LoggerService,
    private readonly configService: ConfigService,
    private readonly tonService: TonService,
  ) {
    this.conversionRate = this.configService.get<number>("CONVERSION_RATE", 100);
    this.minAmount = this.configService.get<number>("MIN_AMOUNT", 100);
    this.paymentsToken = this.configService.get<string>("PAYMENTS_TOKEN", "");
  }

  async startCommand(ctx: Context) {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT!\n\n" + "–î–ª—è –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exchange");
  }

  async helpCommand(ctx: Context) {
    const helpMessage =
      "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n" +
      "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
      "‚Ä¢ /exchange - –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT\n" +
      "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±–º–µ–Ω–∞\n" +
      "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(helpMessage);
  }

  async initiateExchange(ctx: Context) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Å—Å–∏–∏
    this.setSessionData(ctx, { paymentStatus: PaymentStatus.IDLE });

    const message =
      "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ USDT, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –±–æ—Ç—É.\n\n" +
      `–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(message);

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
      await this.sendInvoice(ctx, this.minAmount);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Å—Å–∏–∏
      this.setSessionData(ctx, { paymentStatus: PaymentStatus.WAITING });
    } catch (error) {
      this.loggerService.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  async checkStatus(ctx: Context) {
    const session = this.getSessionData(ctx);

    let statusMessage = "–°—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞: ";

    switch (session.paymentStatus) {
      case PaymentStatus.IDLE:
        statusMessage += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞.";
        break;
      case PaymentStatus.WAITING:
        statusMessage += "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫...";
        break;
      case PaymentStatus.COMPLETED:
        statusMessage += `–ó–∞–≤–µ—Ä—à–µ–Ω!\n–û–±–º–µ–Ω—è–Ω–æ ${session.starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ ${session.usdtAmount} USDT.`;
        break;
    }

    await ctx.reply(statusMessage);
  }

  async handlePaymentReceived(ctx: Context, starsAmount: number, paymentId: string) {
    try {
      // –†–∞—Å—á–µ—Ç USDT –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
      const usdtAmount = starsAmount / this.conversionRate;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
      if (starsAmount < this.minAmount) {
        await ctx.reply(
          `–ü–æ–ª—É—á–µ–Ω–æ ${starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫, –Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ - ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫.`,
        );
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      this.setSessionData(ctx, {
        paymentStatus: PaymentStatus.COMPLETED,
        starsAmount,
        usdtAmount,
        lastPaymentId: paymentId,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
      await ctx.reply(
        `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫!\n\n` +
          `üí∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º ${usdtAmount} USDT –Ω–∞ TON –∫–æ—à–µ–ª–µ–∫...\n` +
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`,
      );

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from?.id;

      if (!userId) {
        throw new Error("User ID not found");
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      let chatId: number;

      if ("chat" in ctx && ctx.chat && "id" in ctx.chat) {
        chatId = ctx.chat.id;
      } else {
        chatId = userId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ fallback
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ USDT —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Telegram
      const response = await this.tonService.sendUsdtToUserWallet(userId, chatId, usdtAmount);

      if (response.success) {
        await ctx.reply(
          `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n` +
            `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${usdtAmount} USDT\n` +
            `üßæ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${response.transactionId}\n\n` +
            `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`,
        );
      } else {
        await ctx.reply(
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ USDT.\n" + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
        );
      }
    } catch (error) {
      this.loggerService.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π
  private getSessionData(ctx: Context): ISessionData {
    return (ctx as any).session || { paymentStatus: PaymentStatus.IDLE };
  }

  private setSessionData(ctx: Context, data: Partial<ISessionData>) {
    if (!(ctx as any).session) {
      (ctx as any).session = { paymentStatus: PaymentStatus.IDLE };
    }

    (ctx as any).session = {
      ...(ctx as any).session,
      ...data,
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É—è sendInvoice)
   */
  async sendInvoice(ctx: Context, starsAmount: number): Promise<void> {
    try {
      const chatId = ctx.chat?.id;
      if (!chatId) {
        throw new Error("Chat ID not found");
      }

      // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏, —Ü–µ–Ω—Ç—ã –∏ —Ç.–¥.)
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫
      const amount = starsAmount * 100; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏–µ –µ–¥–∏–Ω–∏—Ü—ã

      const title = "–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫";
      const description = `–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ ${starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ USDT`;
      const payload = `stars_purchase_${Date.now()}`;

      await ctx.sendInvoice({
        title,
        currency: "USDT",
        description,
        payload,
        provider_token: this.paymentsToken,
        prices: [
          {
            label: `${starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`,
            amount,
          },
        ],
      });

      this.loggerService.log(`Invoice sent to chat ${chatId} for ${starsAmount} stars`);
    } catch (error) {
      this.loggerService.error("Error sending invoice:", error);
      throw error;
    }
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
   */
  async handleSuccessfulPayment(ctx: Context): Promise<{
    amount: number;
    transactionId: string;
    currency: string;
  }> {
    try {
      const message = ctx.message as any;
      if (!message?.successful_payment) {
        throw new Error("No successful payment data found");
      }

      const { successful_payment } = message;

      this.loggerService.log(`Successful payment received: ${JSON.stringify(successful_payment)}`);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –µ–¥–∏–Ω–∏—Ü (cents -> dollars)
      const amount = successful_payment.total_amount / 100;

      return Promise.resolve({
        amount: amount,
        transactionId: successful_payment.telegram_payment_charge_id,
        currency: successful_payment.currency,
      });
    } catch (error) {
      this.loggerService.error("Error handling successful payment:", error);
      throw error;
    }
  }
}
