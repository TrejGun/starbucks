import { Inject, Injectable, Logger, LoggerService } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { Context } from "telegraf";
import type { Message as MessageType } from "@telegraf/types";

import { TonService } from "../ton/ton.service";

enum PaymentStatus {
  IDLE = "IDLE",
  WAITING = "WAITING",
  COMPLETED = "COMPLETED",
}

interface ISessionData {
  paymentStatus: PaymentStatus;
  lastPaymentId?: string;
  starsAmount?: number;
  usdtAmount?: number;
}

@Injectable()
export class BotService {
  private readonly conversionRate: number;
  private readonly minAmount: number;

  constructor(
    @Inject(Logger)
    private readonly loggerService: LoggerService,
    private readonly configService: ConfigService,
    private readonly tonService: TonService,
  ) {
    this.conversionRate = this.configService.get<number>("CONVERSION_RATE", 100);
    this.minAmount = this.configService.get<number>("MIN_AMOUNT", 100);
  }

  public async startCommand(ctx: Context) {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT!\n\n" + "–î–ª—è –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exchange");
  }

  public async helpCommand(ctx: Context) {
    const helpMessage =
      "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n" +
      "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
      "‚Ä¢ /exchange - –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT\n" +
      "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±–º–µ–Ω–∞\n" +
      "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(helpMessage);
  }

  public async initiateExchange(ctx: Context) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Å—Å–∏–∏
    this.setSessionData(ctx, { paymentStatus: PaymentStatus.IDLE });

    const message =
      "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ USDT, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –±–æ—Ç—É.\n\n" +
      `–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(message);

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
      await this.sendInvoice(ctx, this.minAmount);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Å—Å–∏–∏
      this.setSessionData(ctx, { paymentStatus: PaymentStatus.WAITING });
    } catch (error) {
      this.loggerService.error(error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  public async checkStatus(ctx: Context) {
    const session = this.getSessionData(ctx);

    let statusMessage = "–°—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞: ";

    switch (session.paymentStatus) {
      case PaymentStatus.IDLE:
        statusMessage += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞.";
        break;
      case PaymentStatus.WAITING:
        statusMessage += "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫...";
        break;
      case PaymentStatus.COMPLETED:
        statusMessage += `–ó–∞–≤–µ—Ä—à–µ–Ω!\n–û–±–º–µ–Ω—è–Ω–æ ${session.starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ ${session.usdtAmount} USDT.`;
        break;
    }

    await ctx.reply(statusMessage);
  }

  private getSessionData(ctx: Context): ISessionData {
    return (ctx as any).session || { paymentStatus: PaymentStatus.IDLE };
  }

  private setSessionData(ctx: Context, data: Partial<ISessionData>) {
    if (!(ctx as any).session) {
      (ctx as any).session = { paymentStatus: PaymentStatus.IDLE };
    }

    (ctx as any).session = {
      ...(ctx as any).session,
      ...data,
    };
  }

  private async sendInvoice(ctx: Context, amount: number): Promise<void> {
    const chatId = ctx.chat?.id;
    if (!chatId) {
      throw new Error("Chat ID not found");
    }

    await ctx.sendInvoice({
      title: "–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫",
      description: `–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ ${amount} –∑–≤–µ–∑–¥–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ USDT`,
      currency: "XTR",
      payload: `stars_purchase_${Date.now()}`,
      provider_token: "",
      prices: [
        {
          label: `${amount} –∑–≤–µ–∑–¥–æ—á–µ–∫`,
          amount: amount,
        },
      ],
    });

    this.loggerService.log(`Invoice sent to chat ${chatId} for ${amount} stars`);
  }

  public async handlePreCheckoutQuery(ctx: Context) {
    // TODO check USDT balance
    await ctx.answerPreCheckoutQuery(true);
  }

  public async handleSuccessfulPayment(ctx: Context): Promise<void> {
    const chatId = ctx.chat?.id;
    if (!chatId) {
      throw new Error("Chat ID not found");
    }

    const fromId = ctx.from?.id;
    if (!fromId) {
      throw new Error("User ID not found");
    }

    const { successful_payment } = ctx.message as MessageType.SuccessfulPaymentMessage;

    if (successful_payment.currency !== "XTR") {
      throw new Error("Unsupported currency");
    }

    this.loggerService.log(`Successful payment received: ${JSON.stringify(successful_payment)}`);

    // TODO save from, receipt, date and amount to DB

    await this.tonService.sendUsdtToUserWallet(chatId, fromId, successful_payment.total_amount);

    await ctx.reply("Payment successful!");
  }
}
