import { Inject, Injectable, Logger, LoggerService } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { Context } from "telegraf";
import type { Message as MessageType } from "@telegraf/types";
import { SupabaseClient } from "@supabase/supabase-js";

import { TonService } from "../ton/ton.service";
import { SUPABASE_PROVIDER } from "../database/database.provider";

@Injectable()
export class BotService {
  private readonly conversionRate: number;
  private readonly minAmount: number;

  constructor(
    @Inject(Logger)
    private readonly loggerService: LoggerService,
    @Inject(SUPABASE_PROVIDER)
    private readonly supabase: SupabaseClient,
    private readonly configService: ConfigService,
    private readonly tonService: TonService,
  ) {
    this.conversionRate = this.configService.get<number>("CONVERSION_RATE", 100);
    this.minAmount = this.configService.get<number>("MIN_AMOUNT", 100);
  }

  public async startCommand(ctx: Context) {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT!\n\n" + "–î–ª—è –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exchange");
  }

  public async helpCommand(ctx: Context) {
    const helpMessage =
      "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n" +
      "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
      "‚Ä¢ /exchange - –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT\n" +
      "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±–º–µ–Ω–∞\n" +
      "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(helpMessage);
  }

  public async exchangeCommand(ctx: Context) {
    const message =
      "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ USDT, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –±–æ—Ç—É.\n\n" +
      `–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(message);

    // TODO allow user to select 1, 10, 100 USDT

    await this.sendInvoice(ctx, this.minAmount);
  }

  private async sendInvoice(ctx: Context, amount: number) {
    const chatId = ctx.chat?.id;
    if (!chatId) {
      throw new Error("Chat ID not found");
    }

    await ctx.sendInvoice({
      title: "Withdraw",
      description: `Send stars to receive USDT`,
      currency: "XTR",
      payload: new Date().toISOString(),
      provider_token: "",
      prices: [
        {
          label: "1 star",
          amount: 1,
        },
      ],
    });

    this.loggerService.log(`Invoice sent to chat ${chatId} for ${amount} stars`);
  }

  public async handlePreCheckoutQuery(ctx: Context) {
    // TODO check available USDT balance
    await ctx.answerPreCheckoutQuery(true);
  }

  public async handleSuccessfulPayment(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (!chatId) {
      throw new Error("Chat ID not found");
    }

    const fromId = ctx.from?.id;
    if (!fromId) {
      throw new Error("User ID not found");
    }

    const { successful_payment } = ctx.message as MessageType.SuccessfulPaymentMessage;

    if (successful_payment.currency !== "XTR") {
      throw new Error("Unsupported currency");
    }

    this.loggerService.log(`Successful payment received: ${JSON.stringify(successful_payment)}`);

    await this.supabase
      .from("transactions")
      .insert({
        telegram_user_id: fromId,
        amount: 100, // TODO fixme: amount in USDT
        receipt: successful_payment.telegram_payment_charge_id,
        stars: successful_payment.total_amount,
      })
      .throwOnError();

    await this.tonService.sendUsdtToUserWallet(chatId, fromId, successful_payment.total_amount);

    await ctx.reply("Payment successful!");
  }
}
