import { Injectable, Logger } from "@nestjs/common";
import { Context } from "telegraf";
import { ConfigService } from "@nestjs/config";

import { PaymentsService } from "./payments.service";
import { TonService } from "./ton.service";

interface ISessionData {
  paymentStatus: "idle" | "waiting" | "completed";
  lastPaymentId?: string;
  starsAmount?: number;
  usdtAmount?: number;
}

@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  private readonly conversionRate: number;
  private readonly minAmount: number;

  constructor(
    private readonly configService: ConfigService,
    private readonly paymentsService: PaymentsService,
    private readonly tonService: TonService,
  ) {
    this.conversionRate = this.configService.get<number>("CONVERSION_RATE", 100);
    this.minAmount = this.configService.get<number>("MIN_AMOUNT", 100);
  }

  async startCommand(ctx: Context) {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT!\n\n" + "–î–ª—è –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exchange");
  }

  async helpCommand(ctx: Context) {
    const helpMessage =
      "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n" +
      "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
      "‚Ä¢ /exchange - –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT\n" +
      "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±–º–µ–Ω–∞\n" +
      "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
      `üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    await ctx.reply(helpMessage);
  }

  async initiateExchange(ctx: Context) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Å—Å–∏–∏
    this.setSessionData(ctx, { paymentStatus: "idle" });

    const message =
      "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ USDT, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –±–æ—Ç—É.\n\n" +
      `–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: ${this.conversionRate} –∑–≤–µ–∑–¥–æ—á–µ–∫ = 1 USDT\n` +
      `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫`;

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
      const paymentLink = await this.paymentsService.createStarsPaymentLink({
        amount: this.minAmount,
        description: "–û–±–º–µ–Ω –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ USDT",
        hidden_message: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±–º–µ–Ω!",
        allow_anonymous: false,
        allow_foreign_from_user_id: true,
      });

      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [[{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏", url: paymentLink }]],
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Å—Å–∏–∏
      this.setSessionData(ctx, { paymentStatus: "waiting" });
    } catch (error) {
      this.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  async checkStatus(ctx: Context) {
    const session = this.getSessionData(ctx);

    let statusMessage = "–°—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞: ";

    switch (session.paymentStatus) {
      case "idle":
        statusMessage += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞.";
        break;
      case "waiting":
        statusMessage += "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫...";
        break;
      case "completed":
        statusMessage += `–ó–∞–≤–µ—Ä—à–µ–Ω!\n–û–±–º–µ–Ω—è–Ω–æ ${session.starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ ${session.usdtAmount} USDT.`;
        break;
    }

    await ctx.reply(statusMessage);
  }

  async handlePaymentReceived(ctx: Context, starsAmount: number, paymentId: string) {
    try {
      // –†–∞—Å—á–µ—Ç USDT –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
      const usdtAmount = starsAmount / this.conversionRate;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
      if (starsAmount < this.minAmount) {
        await ctx.reply(
          `–ü–æ–ª—É—á–µ–Ω–æ ${starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫, –Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ - ${this.minAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫.`,
        );
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      this.setSessionData(ctx, {
        paymentStatus: "completed",
        starsAmount,
        usdtAmount,
        lastPaymentId: paymentId,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
      await ctx.reply(
        `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${starsAmount} –∑–≤–µ–∑–¥–æ—á–µ–∫!\n\n` +
          `üí∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º ${usdtAmount} USDT –Ω–∞ TON –∫–æ—à–µ–ª–µ–∫...\n` +
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`,
      );

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from?.id;

      if (!userId) {
        throw new Error("User ID not found");
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      let chatId: number;

      if ("chat" in ctx && ctx.chat && "id" in ctx.chat) {
        chatId = ctx.chat.id;
      } else {
        chatId = userId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ fallback
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ USDT —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Telegram
      const response = await this.tonService.sendUsdtToUserWallet(userId, chatId, usdtAmount);

      if (response.success) {
        await ctx.reply(
          `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n` +
            `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${usdtAmount} USDT\n` +
            `üßæ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${response.transactionId}\n\n` +
            `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`,
        );
      } else {
        await ctx.reply(
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ USDT.\n" + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
        );
      }
    } catch (error) {
      this.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π
  private getSessionData(ctx: Context): ISessionData {
    return (ctx as any).session || { paymentStatus: "idle" };
  }

  private setSessionData(ctx: Context, data: Partial<ISessionData>) {
    if (!(ctx as any).session) {
      (ctx as any).session = { paymentStatus: "idle" };
    }

    (ctx as any).session = {
      ...(ctx as any).session,
      ...data,
    };
  }
}
